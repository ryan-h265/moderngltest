# PROJECT: 3dlibtesting

## FUNCTIONS
assets.textures.smaa_textures.get_area_texture_data: get_area_texture_data() | Get decoded area texture data.
assets.textures.smaa_textures.get_search_texture_data: get_search_texture_data() | Get decoded search texture data.
check_shadow_resolutions.calculate_importance: calculate_importance(light, camera_pos) | Calculate light importance score
check_shadow_resolutions.main: main()
debug_frustum.test_frustum_culling: test_frustum_culling() | Test frustum culling with test positions
debug_gltf_model.main: main() | Main entry point.
examples.generate_fractal_scene.main: main()
examples.generate_fractal_scene.make_scene_json: make_scene_json(scene_path: str, heightmap_relpath: str, metadata: dict)
examples.load_fractal_terrain.build_terrain_mesh_data: build_terrain_mesh_data(heights, world_size) | Build vertex and index arrays for rendering a h...
examples.load_fractal_terrain.example_usage: example_usage() | Example of loading and processing a fractal ter...
examples.load_fractal_terrain.load_heightmap: load_heightmap(npz_path) | Load heightmap and metadata from .npz file.
examples.load_fractal_terrain.load_scene_json: load_scene_json(scene_path) | Load a fractal terrain scene JSON.
project_overview_generator.main: main() | Main entry point.
src.gamelib.core.geometry_utils.cone: cone(radius, height, segments) | Create a cone geometry.
src.gamelib.core.geometry_utils.donut_terrain: donut_terrain(resolution, outer_radius, inner_radius, height, rim_width, seed) | Create a donut-shaped terrain mesh with procedu...
src.gamelib.core.geometry_utils.heightmap_terrain: heightmap_terrain(heightmap_path) | Create a terrain mesh from a pre-generated heig...
src.gamelib.core.geometry_utils.pyramid: pyramid(base_size, height) | Create a pyramid geometry (square base with 4 t...
src.gamelib.core.light._vec3: _vec3(value, fallback: Tuple[float, float, float]) -> Tuple[float, float, float] | Utility to coerce JSON vectors into tuples.
src.gamelib.core.scene._opt_vec3: _opt_vec3(value: Optional[List[float]]) -> Optional[Tuple[float, float, float]] | Convert an optional JSON vector to a tuple of f...
src.gamelib.core.scene._vec3: _vec3(value, fallback: Tuple[float, float, float]) -> Tuple[float, float, float] | Convert a JSON vector to a tuple of floats.
src.gamelib.core.terrain_generation.fractal_noise: fractal_noise(x, y, octaves, persistence, lacunarity, seed, use_perlin) | Generate fractal noise by combining multiple oc...
src.gamelib.core.terrain_generation.generate_donut_height_data: generate_donut_height_data(resolution, outer_radius, inner_radius, height, rim_width, seed, use_perlin) | Generate height data for a donut-shaped terrain...
src.gamelib.core.terrain_generation.generate_fractal_terrain: generate_fractal_terrain(resolution, world_size, preset, seed, octaves, persistence, lacunarity, amplitude, scale) | Generate natural fractal terrain using Perlin-b...
src.gamelib.core.terrain_generation.simple_noise: simple_noise(x, y, seed) | Simple pseudo-noise function using sine waves a...
src.gamelib.fractal_perlin._fade: _fade(t: np.ndarray) -> np.ndarray
src.gamelib.fractal_perlin._grad: _grad(hash_vals: np.ndarray, x: np.ndarray, y: np.ndarray) -> np.ndarray
src.gamelib.fractal_perlin._lerp: _lerp(a: np.ndarray, b: np.ndarray, t: np.ndarray) -> np.ndarray
src.gamelib.fractal_perlin._make_perm: _make_perm(seed: int) -> np.ndarray
src.gamelib.fractal_perlin.export_obj: export_obj(path: str, heights: np.ndarray, world_size: float) -> None | Export a simple OBJ mesh for the heightmap. Ver...
src.gamelib.fractal_perlin.fbm: fbm(x: np.ndarray | float, y: np.ndarray | float, octaves: int, persistence: float, lacunarity: float, seed: int) -> np.ndarray | Fractal Brownian Motion using Perlin noise.
src.gamelib.fractal_perlin.fractal_terrain.generate_mountain_terrain: generate_mountain_terrain(width: int, height: int, seed: int, octaves: int, persistence: float, lacunarity: float, scale: float, ridge_noise: bool, apply_warping: bool, warp_strength: float, hydraulic_iterations: int, erosion_rate: float, thermal_iterations: int, talus_angle: float) -> np.ndarray | Generate complete mountain terrain with fractal...
src.gamelib.fractal_perlin.generate_noise_grid: generate_noise_grid(resolution: int) -> Tuple[np.ndarray, Dict[str, Any]] | Generate a height grid (resolution x resolution...
src.gamelib.fractal_perlin.perlin: perlin(x: np.ndarray | float, y: np.ndarray | float, seed: int) -> np.ndarray | 2D Perlin noise. Accepts scalar or numpy arrays...
src.gamelib.fractal_perlin.save_heightmap: save_heightmap(path: str, heights: np.ndarray, metadata: Dict[str, Any], json_fallback: bool) -> None | Save heights and metadata to .npz file. If json...
src.gamelib.fractal_perlin.terrain_usage_guide.fixing_common_problems: fixing_common_problems() | Solutions to common parameter tuning problems.
src.gamelib.fractal_perlin.terrain_usage_guide.gentle_hills_example: gentle_hills_example() | Create gentle, rolling hills (easy difficulty).
src.gamelib.fractal_perlin.terrain_usage_guide.heavily_eroded_canyon: heavily_eroded_canyon() | Create canyon-like eroded terrain (hard difficu...
src.gamelib.fractal_perlin.terrain_usage_guide.interactive_parameter_test: interactive_parameter_test() | Test different parameter values to understand t...
src.gamelib.fractal_perlin.terrain_usage_guide.parameter_tuning_workflow: parameter_tuning_workflow() | Recommended workflow for tuning parameters from...
src.gamelib.fractal_perlin.terrain_usage_guide.quick_start_example: quick_start_example() | The easiest way to get good results - use presets!
src.gamelib.fractal_perlin.terrain_usage_guide.sharp_mountains_example: sharp_mountains_example() | Create sharp, Alpine-style peaks (medium diffic...
src.gamelib.fractal_perlin.terrain_usage_guide.understanding_parameters: understanding_parameters() | Critical parameters and their safe ranges to av...
src.gamelib.input.input_commands.get_command_type: get_command_type(command: InputCommand) -> InputType | Get the input type for a command.
src.gamelib.physics.collision_meshes._default_generator_output_name: _default_generator_output_name(definition: Dict[str, Any], target: Any) -> str
src.gamelib.physics.collision_meshes._default_gltf_output_name: _default_gltf_output_name(source_path: Path) -> str
src.gamelib.physics.collision_meshes._ensure_collision_dir: _ensure_collision_dir(path: Path) -> None
src.gamelib.physics.collision_meshes._ensure_obj_extension: _ensure_obj_extension(label: str) -> str
src.gamelib.physics.collision_meshes._import_callable: _import_callable(target: str)
src.gamelib.physics.collision_meshes._needs_rebuild: _needs_rebuild(output_path: Path, dependencies: Iterable[Path]) -> bool
src.gamelib.physics.collision_meshes._resolve_generator_collision: _resolve_generator_collision(definition: Dict[str, Any], base_path: Optional[Path], force_rebuild: bool) -> CollisionMeshResult
src.gamelib.physics.collision_meshes._resolve_gltf_collision: _resolve_gltf_collision(definition: Dict[str, Any], base_path: Optional[Path], force_rebuild: bool) -> CollisionMeshResult
src.gamelib.physics.collision_meshes._resolve_input_path: _resolve_input_path(value: str, base_path: Optional[Path]) -> Path
src.gamelib.physics.collision_meshes._resolve_output_path: _resolve_output_path(definition: Dict[str, Any], default_name: str) -> Path
src.gamelib.physics.collision_meshes._slugify: _slugify(value: str) -> str
src.gamelib.physics.collision_meshes._slugify_path: _slugify_path(value: str) -> str
src.gamelib.physics.collision_meshes.resolve_collision_mesh: resolve_collision_mesh(definition: Dict[str, Any]) -> CollisionMeshResult | Resolve (and build if necessary) a collision me...
src.gamelib.physics.collision_primitives._write_obj: _write_obj(path: Path, vertices: Sequence[Iterable[float]], faces: Sequence[Tuple[int, int, int]]) -> None | Write a simple OBJ file containing only vertice...
src.gamelib.physics.collision_primitives.export_cone_collision: export_cone_collision(out_path: Path) -> None | Generate a unit cone collision mesh aligned on ...
src.gamelib.physics.physics_world._quat: _quat(value: Iterable[float] | None) -> Optional[Tuple[float, float, float, float]] | Convert an iterable to a quaternion tuple in (x...
src.gamelib.physics.physics_world._vec3: _vec3(value: Iterable[float] | None) -> Optional[Tuple[float, float, float]] | Convert an iterable to a tuple of three floats.
src.gamelib.ui.widgets.property_editor.edit_color: edit_color(label: str, value: Tuple[float, float, float, float]) -> Tuple[bool, Tuple[float, float, float, float]] | Edit a color (RGBA).
src.gamelib.ui.widgets.property_editor.edit_enum: edit_enum(label: str, value: Any, enum_class: type) -> Tuple[bool, Any] | Edit an enum value with radio buttons.
src.gamelib.ui.widgets.property_editor.edit_float: edit_float(label: str, value: float, min_val: float, max_val: float, step: float) -> Tuple[bool, float] | Edit a float value with a slider and input field.
src.gamelib.ui.widgets.property_editor.edit_text: edit_text(label: str, value: str, max_length: int) -> Tuple[bool, str] | Edit a text field.
src.gamelib.ui.widgets.property_editor.edit_vector3: edit_vector3(label: str, value: Vector3, min_val: float, max_val: float, step: float) -> Tuple[bool, Vector3] | Edit a Vector3 with three sliders (X, Y, Z).
tools.export_collision_meshes._collect_scene_paths: _collect_scene_paths(paths: Sequence[str] | None) -> List[Path]
tools.export_collision_meshes._ensure_collision_dir: _ensure_collision_dir() -> None
tools.export_collision_meshes._iter_collision_definitions: _iter_collision_definitions(scene_path: Path) -> Iterator[Tuple[Path, Dict, str]]
tools.export_collision_meshes._load_gltf: _load_gltf(path: Path) -> Tuple[Dict, List[bytes]]
tools.export_collision_meshes._read_accessor: _read_accessor(data: Dict, buffers: List[bytes], accessor_index: int) -> np.ndarray
tools.export_collision_meshes._traverse_nodes: _traverse_nodes(data: Dict) -> List[Tuple[int, np.ndarray]]
tools.export_collision_meshes._write_obj: _write_obj(path: Path, vertices: Sequence[Iterable[float]], faces: Sequence[Iterable[int]]) -> None
tools.export_collision_meshes.cli: cli(argv: Sequence[str] | None) -> int
tools.export_collision_meshes.export_donut_collision: export_donut_collision(out_path: Path) -> None | Export the procedurally generated donut terrain...
tools.export_collision_meshes.export_gltf_collision: export_gltf_collision(source: Path, destination: Path) -> None
tools.export_collision_meshes.export_heightmap_collision: export_heightmap_collision(out_path: Path) -> None | Export a heightmap terrain to an OBJ collision ...
tools.export_collision_meshes.main: main(argv: Sequence[str] | None) -> int | CLI-compatible entry point.

## CLASSES
debug_gltf_model.GltfDiagnostics | Diagnostic tool for analyzing GLTF models.
  __init__(self)
  analyze_model(self, filepath: str) | Analyze a GLTF model and report issues.
  _analyze_basic_info(self, gltf) | Analyze basic model information.
  _analyze_scene_hierarchy(self, gltf) | Analyze scene hierarchy and node transforms.
  _analyze_node_hierarchy(self, gltf, node_idx, parent_transform, depth) | Recursively analyze node hierarchy.
  _analyze_transform(self, local_transform, world_transform, indent, node_name) | Analyze transform matrices for issues.
  _get_node_transform(self, node) | Extract transformation matrix from a GLTF node.
  _count_mesh_vertices(self, gltf, mesh) | Estimate vertex count for a mesh.
  _analyze_materials(self, gltf) | Analyze materials and textures.
  _print_summary(self) | Print analysis summary.
examples.simple_scene.SimpleSceneDemo(mglw.WindowConfig) | Simple 3-cube scene
  __init__(self, **kwargs)
  _create_simple_scene(self) | Create a simple 3-cube scene
  on_update(self, time, frametime)
  on_render(self, time, frametime)
  on_mouse_position_event(self, _x, _y, dx, dy)
  on_key_event(self, key, action, modifiers)
main.Game(mglw.WindowConfig) | Main game class
  __init__(self, **kwargs)
  _on_game_state_changed(self, old_state: GameState, new_state: GameState) | Called when game state changes.
  _load_scene_from_menu(self, scene_id: str) -> bool | Load a scene after selection from main menu.
  toggle_pause(self) | Toggle pause state.
  _spawn_player(self) -> PlayerCharacter | None
  _create_camera_rig(self) -> CameraRig
  toggle_debug_camera(self)
  toggle_editor_mode(self) | Toggle between GAMEPLAY and LEVEL_EDITOR contexts.
  toggle_attribute_mode(self) | Toggle attribute editing mode (Tab key).
  on_update(self, time, frametime) | Update game logic.
  on_render(self, time, frametime) | Render a frame.
  on_mouse_position_event(self, _x: int, _y: int, dx: int, dy: int) | Handle mouse movement.
  on_mouse_press_event(self, x: int, y: int, button: int) | Handle mouse button press.
  on_mouse_release_event(self, x: int, y: int, button: int) | Handle mouse button release.
  resize(self, width: int, height: int) | Handle window resize events by updating render ...
  on_key_event(self, key, action, modifiers) | Handle keyboard events.
project_overview_generator.ClassInfo | Represents a class.
project_overview_generator.FunctionInfo | Represents a function or method.
project_overview_generator.ProjectAnalyzer | Analyzes Python project structure.
  __init__(self, project_path: str)
  should_exclude_path(self, path: Path) -> bool | Check if path should be excluded.
  truncate_description(self, text: str) -> str | Truncate description to max length.
  extract_docstring_summary(self, node: ast.AST) -> str | Extract and truncate first line of docstring.
  get_type_annotation(self, annotation: Optional[ast.AST]) -> str | Convert AST annotation to string.
  extract_function_signature(self, node: ast.FunctionDef) -> tuple | Extract compact function signature and return t...
  should_include_method(self, method_name: str) -> bool | Check if method should be included (filter boil...
  analyze_file(self, file_path: Path) | Analyze a single Python file.
  is_module_level(self, node: ast.FunctionDef, tree: ast.Module) -> bool | Check if function is at module level.
  get_module_name(self, file_path: Path) -> str | Convert file path to module name.
  process_class(self, node: ast.ClassDef, module_name: str, file_path: Path) | Process a class definition.
  process_method(self, node: ast.FunctionDef, class_namespace: str, file_path: Path) -> FunctionInfo | Process a method definition.
  process_function(self, node: ast.FunctionDef, module_name: str, file_path: Path) | Process a module-level function.
  scan_project(self) | Scan the entire project.
  generate_overview(self) -> str | Generate compact overview.
  format_function(self, f: FunctionInfo) -> str | Format function in compact single line.
  format_class(self, c: ClassInfo) -> List[str] | Format class in compact format.
src.gamelib.animation.animation.Animation | Complete animation with multiple channels.
  __init__(self, name: str) | Initialize animation.
  add_channel(self, channel: AnimationChannel) | Add an animation channel.
  sample_all(self, time: float) -> dict | Sample all channels at a given time.
src.gamelib.animation.animation.AnimationChannel | Animation channel targets a specific joint prop...
  __init__(self, target_node_name: str, target_property: AnimationTarget, interpolation: InterpolationType) | Initialize animation channel.
  add_keyframe(self, time: float, value) | Add a keyframe to this channel.
  sample(self, time: float) | Sample the animation at a given time.
  _interpolate_linear(self, k0: Keyframe, k1: Keyframe, time: float) | Linear interpolation between two keyframes.
src.gamelib.animation.animation.AnimationTarget(Enum) | Animation target properties.
src.gamelib.animation.animation.InterpolationType(Enum) | Animation interpolation types.
src.gamelib.animation.animation.Keyframe | Single keyframe in an animation.
  __init__(self, time: float, value) | Initialize keyframe.
src.gamelib.animation.animation_controller.AnimationController | Controls animation playback for a skeleton.
  __init__(self, skeleton: Skeleton) | Initialize animation controller.
  play(self, animation: Animation, loop: bool) | Start playing an animation.
  pause(self) | Pause animation playback.
  resume(self) | Resume animation playback.
  stop(self) | Stop animation and reset to bind pose.
  update(self, delta_time: float) | Update animation playback.
  _apply_animation_to_skeleton(self, sampled_data: dict) | Apply sampled animation data to skeleton joints.
src.gamelib.animation.skeleton.Joint | Represents a single joint (bone) in a skeleton ...
  __init__(self, name: str, index: int, parent: Optional['Joint']) | Initialize a joint.
  add_child(self, child: 'Joint') | Add a child joint to this joint's hierarchy.
  get_animated_local_transform(self) -> Matrix44 | Get the current local transform (animated or bi...
src.gamelib.animation.skeleton.Skeleton | Hierarchical skeleton structure.
  __init__(self, name: str) | Initialize skeleton.
  add_joint(self, joint: Joint) | Add a joint to the skeleton.
  get_joint(self, name: str) -> Optional[Joint] | Find a joint by name.
  update_world_transforms(self) | Update all world transforms from local transforms.
  _update_joint_recursive(self, joint: Joint, parent_world: Matrix44) | Recursively update joint world transforms.
  reset_animation(self) | Reset all joints to bind pose (clear animated t...
src.gamelib.animation.skin.Skin | Skin binds a skeleton to a mesh.
  __init__(self, name: str) | Initialize skin.
  add_joint(self, joint: Joint, inverse_bind_matrix: Matrix44) | Add a joint to the skin.
  update_joint_matrices(self) | Compute joint matrices for shader upload.
  get_joint_matrices_array(self) -> np.ndarray | Get joint matrices as a numpy array for shader ...
src.gamelib.core.camera.Camera | First-person camera with FPS-style controls.
  __init__(self, position: Vector3, target: Vector3, speed: float, sensitivity: float) | Initialize camera.
  update_vectors(self) | Update camera direction vectors based on yaw an...
  get_view_matrix(self) -> Matrix44 | Get the camera view matrix.
  get_projection_matrix(self, aspect_ratio: float, fov: float) -> Matrix44 | Get the camera projection matrix.
  get_frustum(self, aspect_ratio: float) | Get view frustum for culling.
  get_forward(self) -> Vector3 | Get camera forward vector
  get_position(self) -> Vector3 | Get camera position
  get_front(self) -> Vector3 | Get camera front vector
  get_right(self) -> Vector3 | Get camera right vector
  get_up(self) -> Vector3 | Get camera up vector
src.gamelib.core.camera_rig.CameraRig(ABC) | Abstract base class for camera control rigs.
  __init__(self, camera: 'Camera') -> None
  enable(self) -> None | Enable the rig.
  disable(self) -> None | Disable the rig.
  update(self, delta_time: float) -> None | Update the rig state.
  apply_look_input(self, dx: float, dy: float) -> None | Apply mouse look input.
src.gamelib.core.camera_rig.FirstPersonRig(CameraRig) | Camera rig that positions the camera at the pla...
  __init__(self, camera: 'Camera', player: 'PlayerCharacter', eye_height: float) -> None
  update(self, delta_time: float) -> None
  apply_look_input(self, dx: float, dy: float) -> None
src.gamelib.core.camera_rig.FreeFlyRig(CameraRig) | Camera rig that emulates the classic free-fly d...
  update(self, delta_time: float) -> None
  apply_look_input(self, dx: float, dy: float) -> None
src.gamelib.core.camera_rig.ThirdPersonRig(CameraRig) | Orbiting camera rig with collision avoidance fo...
  __init__(self, camera: 'Camera', player: 'PlayerCharacter', physics_world: 'PhysicsWorld', distance: float, height: float, spring: float) -> None
  update(self, delta_time: float) -> None
  apply_look_input(self, dx: float, dy: float) -> None
  zoom(self, delta: float) -> None
src.gamelib.core.frustum.Frustum | View frustum defined by 6 planes.
  __init__(self, view_projection_matrix: Matrix44) | Extract frustum planes from view-projection mat...
  _extract_planes(self, vp: Matrix44) -> list | Extract 6 frustum planes from view-projection m...
  _normalize_plane(self, plane: np.ndarray) -> np.ndarray | Normalize a plane equation.
  contains_sphere(self, center: Vector3, radius: float) -> bool | Test if a sphere is inside or intersects the fr...
  contains_point(self, point: Vector3) -> bool | Test if a point is inside the frustum.
src.gamelib.core.game_state.GameState(Enum) | Top-level game states.
src.gamelib.core.game_state.GameStateManager | Manages game state transitions and coordinates ...
  __init__(self, physics_world: Optional[PhysicsWorld]) | Initialize game state manager.
  register_state_change_callback(self, callback: Callable[[GameState, GameState], None]) -> None | Register a callback for state changes.
  _notify_state_changed(self, old_state: GameState, new_state: GameState) -> None | Notify all registered callbacks of state change.
  set_state(self, new_state: GameState) -> None | Set game state directly (clears any intermediat...
  pause(self) -> None | Pause the game (freeze physics and animations).
  resume(self) -> None | Resume the game (unfreeze physics and animations).
  start_game(self) -> None | Start gameplay from main menu.
  return_to_main_menu(self) -> None | Return to main menu (unload scene).
  begin_loading(self) -> None | Begin scene loading transition.
  finish_loading(self) -> None | Finish scene loading and start gameplay.
  toggle_editor_mode(self) -> None | Toggle between gameplay and editor mode.
  _handle_pause(self) -> None | Handle pause logic (freeze physics, etc.).
  _handle_resume(self) -> None | Handle resume logic (unfreeze physics, etc.).
  get_state(self) -> GameState | Get current game state.
  is_playing(self) -> bool | Check if game is actively playing.
  is_paused(self) -> bool | Check if game is paused.
  is_in_menu(self) -> bool | Check if in main menu.
  is_loading(self) -> bool | Check if loading scene.
  is_editing(self) -> bool | Check if in editor mode.
  is_active(self) -> bool | Check if game is active (not in main menu or sh...
src.gamelib.core.light.Light | Shadow-casting light source.
  __post_init__(self) | Normalize configuration and validate parameters.
  get_light_type_id(self) -> int | Return integer identifier for shaders.
  get_direction(self) -> Vector3 | Calculate a normalized direction vector for dir...
  get_spot_cosines(self) -> tuple | Return cosine of inner/outer cone angles (for s...
  get_light_matrix(self, left: float, right: float, bottom: float, top: float, near: float, far: float) -> Matrix44 | Calculate light projection and view matrix.
  should_render_shadow(self, intensity_threshold: float, throttle_frames: int) -> bool | Determine if this light's shadow should be rend...
  is_shadow_dirty(self) -> bool | Check if shadow map needs to be re-rendered.
  mark_shadow_clean(self) | Mark shadow map as up-to-date (called after ren...
  increment_shadow_age(self) | Increment frames since last shadow update (for ...
  mark_shadow_dirty(self) | Force shadow map to be re-rendered on next frame.
  animate_rotation(self, time: float, radius: float, height: float, speed: float) | Animate light rotating around a center point.
  set_position(self, x: float, y: float, z: float) | Set light position and mark shadow dirty.
  set_target(self, x: float, y: float, z: float) | Set light target (look-at point) and mark shado...
  set_color(self, r: float, g: float, b: float) | Set light color.
  set_intensity(self, intensity: float) | Set light intensity.
src.gamelib.core.light.LightDefinition | Data descriptor for defining lights in external...
  from_dict(cls, data: Dict[str, Any]) -> 'LightDefinition' | Create a light definition from JSON data.
  instantiate(self) -> 'Light' | Create a runtime light from this definition.
src.gamelib.core.scene.Scene | Manages all objects in the scene.
  __init__(self, ctx) | Initialize empty scene.
  add_object(self, obj: SceneObject) | Add an object to the scene.
  set_skybox(self, skybox: Optional[Skybox]) | Assign a skybox to the scene.
  get_skybox(self) -> Optional[Skybox] | Return the current skybox.
  clear(self) | Remove all objects from the scene
  create_default_scene(self) | Create the default scene with ground plane, mix...
  render_all(self, program, frustum: Optional[Frustum], debug_label: str, textured_program, unlit_program, textured_skinned_program) | Render all objects in the scene.
  get_object_count(self) -> int | Get number of objects in scene
  get_transparent_meshes(self) -> List[Tuple] | Get all transparent meshes (alpha_mode == "BLEN...
  has_transparent_objects(self) -> bool | Check if scene contains any transparent objects.
  get_visible_objects(self, frustum: Frustum) -> List['SceneObject'] | Get list of objects visible in frustum.
  to_dict(self, lights: Optional[List]) -> Dict[str, Any] | Serialize scene to dictionary (for JSON export).
  save_to_json(self, filepath: str, lights: Optional[List]) | Save scene to JSON file.
  load_from_dict(self, scene_dict: Dict[str, Any]) -> Tuple[List, List] | Load scene from dictionary.
  load_from_json(self, filepath: str) -> Tuple[List, List] | Load scene from JSON file.
src.gamelib.core.scene.SceneDefinition | Container for scene-level metadata and node des...
  from_dict(cls, data: Dict[str, Any]) -> 'SceneDefinition' | Create a scene definition from JSON data.
src.gamelib.core.scene.SceneNodeDefinition | Data descriptor for a scene object loaded from ...
  from_dict(cls, data: Dict[str, Any]) -> 'SceneNodeDefinition' | Create a node definition from JSON data.
src.gamelib.core.scene.SceneObject | Represents a renderable object in the scene.
  __init__(self, geom, position: Vector3, color: Tuple[float, float, float], bounding_radius: float, name: str, rotation: Tuple[float, float, float] | Quaternion | None, scale: Tuple[float, float, float] | None) | Initialize scene object.
  get_model_matrix(self) -> Matrix44 | Get the model matrix for this object.
  apply_physics_transform(self, position: Tuple[float, float, float], orientation: Tuple[float, float, float, float]) -> None | Apply a transform received from the physics sim...
  is_visible(self, frustum: Frustum) -> bool | Test if this object is visible in the given fru...
src.gamelib.core.scene_manager.ActiveScene | Container representing the currently loaded scene.
src.gamelib.core.scene_manager.SceneManager | Manage scene registration and synchronous loading.
  __init__(self, ctx, render_pipeline: RenderPipeline, physics_world: Optional[PhysicsWorld])
  scene(self) -> Optional[Scene]
  lights(self) -> list[Light]
  metadata(self) -> Dict[str, object]
  active_name(self) -> Optional[str]
  physics_bodies(self) -> List[PhysicsBodyHandle]
  camera_position(self) -> Optional[Vector3]
  camera_target(self) -> Optional[Vector3]
  player_spawn_position(self) -> Optional[Vector3]
  register_scene(self, name: str, path: Path | str, display_name: Optional[str], description: str, thumbnail_path: Optional[Path | str]) | Register a scene.
  unregister_scene(self, name: str)
  get_scene_metadata(self, name: str) -> Optional[SceneMetadata] | Get metadata for a registered scene.
  get_all_scenes(self) -> Dict[str, SceneMetadata] | Get all registered scenes with their metadata.
  load(self, name: str, camera) -> SceneLoadResult
  _apply_camera_defaults(self, camera)
  clear(self)
src.gamelib.core.scene_manager.SceneMetadata | Metadata for a registered scene.
src.gamelib.core.skybox.Skybox | Container for skybox configuration and resources.
  set_rotation_from_euler(self, yaw: float, pitch: float, roll: float) -> None | Update the rotation matrix from Euler angles (d...
  rotation_matrix(self) -> Matrix44 | Return the current rotation matrix as numpy array.
  set_uniform(self, name: str, value: Any) -> None | Store a custom uniform value.
  get_uniform(self, name: str, default: Any) -> Any | Retrieve a previously stored uniform value.
  solid_color(cls, ctx: moderngl.Context, color: Tuple[float, float, float], name: str) -> 'Skybox' | Create a skybox using a solid color for all faces.
  aurora(cls, ctx: moderngl.Context, name: str, aurora_direction: Tuple[float, float, float]) -> 'Skybox' | Create an aurora procedural skybox configuration.
src.gamelib.debug.debug_overlay.DebugOverlay | Manages debug overlay display.
  __init__(self, pipeline: 'RenderPipeline', visible: bool) | Initialize debug overlay.
  visible(self) -> bool | Get visibility state.
  visible(self, value: bool) | Set visibility state.
  toggle(self) | Toggle visibility on/off.
  update(self, fps: float, frametime: float, camera: Camera, lights: List[Light], scene: Optional[Scene], player: Optional['PlayerCharacter']) | Update debug overlay with current stats.
  _gather_stats(self, fps: float, avg_frametime: float, camera: Camera, lights: List[Light], scene: Optional[Scene], player: Optional['PlayerCharacter']) -> List[str] | Gather all statistics into formatted lines.
  _format_culling_stats(self, stats: Dict[str, Dict[str, object]]) -> List[str]
  _format_shadow_stats(self) -> List[str]
  _format_player_stats(self, player: 'PlayerCharacter') -> List[str] | Format player movement and physics debugging info.
  _update_display(self, lines: List[str]) | Update text display with stats.
  clear(self) | Clear all debug text.
src.gamelib.fractal_perlin.fractal_terrain.FractalTerrain | Generate fractal terrain using layered Perlin n...
  __init__(self, width: int, height: int, seed: int) | Initialize fractal terrain generator.
  generate_fractal_noise(self, octaves: int, persistence: float, lacunarity: float, scale: float, base_amplitude: float, ridge_noise: bool, ridge_offset: float) -> np.ndarray | Generate fractal noise by layering multiple oct...
  apply_domain_warping(self, warp_strength: float, warp_scale: float) -> np.ndarray | Apply domain warping to create more interesting...
src.gamelib.fractal_perlin.fractal_terrain.PerlinNoise | Basic Perlin noise implementation for terrain g...
  __init__(self, seed: int) | Initialize Perlin noise with a seed for reprodu...
  _fade(self, t: np.ndarray) -> np.ndarray | Fade function for smooth interpolation.
  _lerp(self, t: np.ndarray, a: np.ndarray, b: np.ndarray) -> np.ndarray | Linear interpolation.
  _grad(self, hash_val: int, x: float, y: float) -> float | Calculate gradient contribution.
  noise(self, x: np.ndarray, y: np.ndarray) -> np.ndarray | Generate 2D Perlin noise.
src.gamelib.fractal_perlin.fractal_terrain.TerrainErosion | Simulate erosion to create more realistic terrain.
  __init__(self, terrain: np.ndarray) | Initialize erosion simulator.
  hydraulic_erosion(self, iterations: int, rain_amount: float, evaporation_rate: float, sediment_capacity: float, deposition_rate: float, erosion_rate: float, gravity: float, max_lifetime: int, inertia: float) -> np.ndarray | Simulate hydraulic erosion (water flowing and c...
  thermal_erosion(self, iterations: int, talus_angle: float, erosion_rate: float) -> np.ndarray | Simulate thermal erosion (material falling due ...
src.gamelib.fractal_perlin.terrain_advanced.AdvancedTerrain | Advanced terrain generation with additional fea...
  __init__(self, width: int, height: int, seed: int)
  generate_with_preset(self, preset_name: str) -> np.ndarray | Generate terrain using a preset configuration.
  add_terraces(self, num_levels: int, terrace_strength: float) -> np.ndarray | Add terracing effect to terrain (creates steppe...
  add_rivers(self, num_rivers: int, river_depth: float, river_width: float) -> Tuple[np.ndarray, np.ndarray] | Carve river valleys into the terrain.
  apply_smoothing(self, kernel_size: int, iterations: int) -> np.ndarray | Apply Gaussian smoothing to terrain.
  get_slope_map(self) -> np.ndarray | Calculate slope magnitude at each point.
  classify_terrain_types(self, height_threshold: float, slope_threshold: float) -> Dict[str, np.ndarray] | Classify terrain into different types based on ...
src.gamelib.fractal_perlin.terrain_advanced.TerrainPresets | Preset parameter configurations for different t...
  get_preset(preset_name: str) -> Dict[str, Any] | Get preset parameters for terrain generation.
src.gamelib.fractal_perlin.terrain_advanced.TerrainSampler | Utilities for sampling and analyzing terrain.
  get_height_at_point(terrain: np.ndarray, x: float, y: float) -> float | Get interpolated height at a specific point.
  get_normal_at_point(terrain: np.ndarray, x: float, y: float, scale: float) -> np.ndarray | Calculate surface normal at a point.
src.gamelib.gameplay.player_character.PlayerCharacter | High-level gameplay representation of the player.
  __init__(self, model, physics_world: PhysicsWorld, initial_position: Optional[Vector3]) -> None
  _create_physics_body(self) -> PhysicsBodyHandle
  set_movement_intent(self, forward: float, right: float) -> None
  request_jump(self) -> None
  set_sprint(self, active: bool) -> None
  set_crouch(self, active: bool) -> None
  toggle_walk(self) -> None
  set_yaw(self, yaw: float) -> None
  get_position(self) -> Vector3
  update(self, delta_time: float) -> None
  update_post_physics(self, delta_time: float) -> None
  _update_ground_state(self, delta_time: float) -> None
  _process_jump(self) -> None
  _update_velocity(self, delta_time: float) -> None
  _draw_debug(self) -> None
  _swept_move(self, displacement: Vector3) -> None | Perform swept collision detection to prevent tu...
  _resolve_collisions(self) -> None | Resolve penetrations by pushing player out of c...
  _try_step_up(self, contact_normal: Vector3, penetration_depth: float) -> bool | Try to step up over a small obstacle (stairs, c...
  _apply_ground_snapping(self) -> None | Snap player down to ground when moving downhill.
  get_eye_position(self) -> Vector3
src.gamelib.input.controllers.camera_controller.CameraController | Handles camera-related input commands.
  __init__(self, camera: Camera, input_manager: InputManager, rig: CameraRig | None) -> None
  _register_handlers(self) -> None
  set_rig(self, rig: CameraRig) -> None
  enable_free_fly(self) -> None
  disable_free_fly(self, rig: CameraRig) -> None
  move_forward(self, delta_time: float) -> None
  move_backward(self, delta_time: float) -> None
  move_left(self, delta_time: float) -> None
  move_right(self, delta_time: float) -> None
  move_up(self, delta_time: float) -> None
  move_down(self, delta_time: float) -> None
  rotate(self, dx: float, dy: float) -> None
  set_speed_boost(self, delta_time: float) -> None | Apply speed boost for camera movement while key...
  toggle_mouse_capture(self)
src.gamelib.input.controllers.game_controller.GameController | Controller for game actions.
  __init__(self, input_manager: InputManager) | Initialize game controller.
  _register_handlers(self) | Register input handlers (placeholder)
src.gamelib.input.controllers.player_controller.PlayerController | Translate input commands into `PlayerCharacter`...
  __init__(self, player, input_manager) -> None
  _register_handlers(self) -> None
  _move_forward(self, delta_time: float) -> None
  _move_backward(self, delta_time: float) -> None
  _move_left(self, delta_time: float) -> None
  _move_right(self, delta_time: float) -> None
  _jump(self) -> None
  _toggle_sprint(self) -> None
  _toggle_crouch(self) -> None
  _toggle_walk(self) -> None
  update(self) -> None
src.gamelib.input.controllers.rendering_controller.RenderingController | Controller for rendering input commands.
  __init__(self, render_pipeline: RenderPipeline, input_manager: InputManager, debug_overlay: Optional['DebugOverlay']) | Initialize rendering controller.
  _register_handlers(self) | Register input handlers with InputManager
  toggle_debug_overlay(self, delta_time: float) | Toggle debug overlay on/off.
  toggle_ssao(self, delta_time: float) | Toggle SSAO on/off.
  cycle_aa_mode(self, delta_time: float) | Cycle through anti-aliasing modes.
  toggle_msaa(self, delta_time: float) | Toggle MSAA on/off.
  toggle_fxaa(self, delta_time: float) | Toggle FXAA on/off.
  toggle_smaa(self, delta_time: float) | Toggle SMAA on/off.
  toggle_light_gizmos(self, delta_time: float) | Toggle debug light gizmos.
src.gamelib.input.controllers.tool_controller.ToolController | Handles tool-related input commands.
  __init__(self, tool_manager: 'ToolManager', input_manager: 'InputManager', camera: 'Camera', scene: 'Scene') | Initialize tool controller.
  _register_handlers(self) | Register input command handlers.
  use_tool(self, delta_time: float) | Use active tool's primary action.
  use_tool_secondary(self, delta_time: float) | Use active tool's secondary action.
  reload_tool(self) | Reload active tool (for weapons).
  cancel_tool(self) | Cancel active tool action.
  next_tool(self) | Switch to next tool in hotbar.
  previous_tool(self) | Switch to previous tool in hotbar.
  select_hotbar(self, slot_number: int) | Select hotbar slot by number (1-9).
  undo(self) | Undo last editor action.
  redo(self) | Redo last undone action.
  save_scene(self) | Save current scene to JSON.
  load_scene(self) | Load scene from JSON.
  toggle_grid(self) | Toggle grid snapping on/off.
  rotate_cw(self) | Rotate selected object clockwise (discrete 45° ...
  rotate_ccw(self) | Rotate selected object counter-clockwise (discr...
  delete_selected(self) | Delete selected object.
  duplicate_selected(self) | Duplicate selected object.
  open_browser(self) | Open model/asset browser.
  update(self, delta_time: float) | Update tool controller.
src.gamelib.input.controllers.ui_controller.UIController | Controller for UI interactions.
  __init__(self, input_manager: InputManager) | Initialize UI controller.
  _register_handlers(self) | Register input handlers (placeholder)
src.gamelib.input.input_commands.InputCommand(Enum) | All possible input commands in the game.
src.gamelib.input.input_commands.InputType(Enum) | Type of input command.
src.gamelib.input.input_context.InputContext(Enum) | Different input contexts for the game.
src.gamelib.input.input_context.InputContextManager | Manages which input commands are available in e...
  __init__(self) | Initialize with GAMEPLAY as default context
  _define_context_commands(self) | Define command availability for each context
  push_context(self, context: InputContext) | Push a new input context onto the stack.
  pop_context(self) -> InputContext | Pop the current context and return to previous.
  set_context(self, context: InputContext) | Set context directly (clears stack).
  is_command_allowed(self, command: InputCommand) -> bool | Check if a command is allowed in the current co...
  get_allowed_commands(self) -> Set[InputCommand] | Get all commands allowed in current context.
  get_current_context(self) -> InputContext | Get the current input context
  get_context_stack(self) -> list | Get the full context stack (for debugging)
  clear_stack(self) | Clear stack and return to GAMEPLAY
src.gamelib.input.input_manager.InputManager | Central input coordinator.
  __init__(self, keys: BaseKeys, key_bindings: Optional[KeyBindings]) | Initialize input manager.
  register_handler(self, command: InputCommand, handler: Callable) | Register a handler for a command.
  unregister_handler(self, command: InputCommand) | Unregister a handler for a command.
  on_key_press(self, key: int) | Handle key press event.
  on_key_release(self, key: int) | Handle key release event.
  on_mouse_move(self, dx: float, dy: float) | Handle mouse movement event.
  on_mouse_button_press(self, button: int) | Handle mouse button press.
  on_mouse_button_release(self, button: int) | Handle mouse button release.
  update(self, delta_time: float) | Update continuous commands and dispatch accumul...
  _execute_command(self, command: InputCommand, delta_time: float) | Execute a command by calling its handler.
  _execute_axis_command(self, command: InputCommand, dx: float, dy: float) | Execute an axis command (like mouse look).
  toggle_mouse_capture(self) -> bool | Toggle mouse capture state.
  set_mouse_capture(self, captured: bool) | Set mouse capture state explicitly.
  push_context(self, context: InputContext) | Push a new input context (e.g., open menu).
  pop_context(self) | Pop the current input context (e.g., close menu).
  get_current_context(self) -> InputContext | Get the current input context.
  clear_all_input(self) | Clear all input state (pressed keys, mouse delt...
src.gamelib.input.key_bindings.KeyBindings | Manages key bindings with save/load support.
  __init__(self, keys: BaseKeys, config_path: Optional[Path]) | Initialize key bindings.
  _set_default_bindings(self) | Set default key bindings
  _update_command_to_keys(self) | Update reverse lookup (command → keys)
  get_command(self, key: int, is_mouse: bool) -> Optional[InputCommand] | Get command for a key or mouse button.
  get_keys_for_command(self, command: InputCommand) -> List[int] | Get all keys bound to a command.
  rebind_key(self, command: InputCommand, new_key: int, is_mouse: bool) | Rebind a command to a new key.
  add_binding(self, command: InputCommand, key: int, is_mouse: bool) | Add an additional key binding for a command.
  remove_binding(self, key: int, is_mouse: bool) | Remove a key binding.
  clear_bindings_for_command(self, command: InputCommand) | Clear all bindings for a command.
  save_bindings(self) | Save bindings to JSON file
  load_bindings(self) -> bool | Load bindings from JSON file.
  reset_to_defaults(self) | Reset all bindings to defaults
  export_bindings(self) -> Dict | Export bindings as a dictionary.
  import_bindings(self, data: Dict) | Import bindings from a dictionary.
src.gamelib.input.object_selector.ObjectSelector | Handles raycasting and object selection in the ...
  __init__(self, raycast_range: float) | Initialize object selector.
  select_from_screen_position(self, camera: Camera, scene: Scene, screen_x: float, screen_y: float, screen_width: int, screen_height: int) -> Optional[SceneObject] | Select object from screen position using raycas...
  _get_ray_direction(self, camera: Camera, ndc_x: float, ndc_y: float) -> Vector3 | Get ray direction from camera through normalize...
  _raycast_sphere(self, ray_origin: Vector3, ray_direction: Vector3, sphere_center: Vector3, sphere_radius: float) -> Optional[float] | Test ray intersection with sphere using geometr...
  get_selected_object(self) -> Optional[SceneObject] | Get currently selected object.
  deselect(self) -> None | Deselect current object.
src.gamelib.loaders.asset_library.Asset | Represents a single asset in the library.
  __init__(self, asset_id: str, name: str, category: str, path: str, thumbnail_path: Optional[str], icon_path: Optional[str], metadata: Optional[dict]) | Initialize asset.
  to_dict(self) -> dict | Convert to dictionary for inspector.
src.gamelib.loaders.asset_library.AssetLibrary | Manages all available assets in the project.
  __init__(self, project_root: Optional[Path]) | Initialize asset library.
  scan_assets(self) -> None | Scan project directories for assets.
  _scan_models(self) -> None | Scan assets/models/ directory for GLTF/GLB files.
  _scan_materials(self) -> None | Scan assets/materials/ directory for material d...
  add_asset(self, asset: Asset) -> None | Add asset to library.
  get_assets_by_category(self, category: str) -> List[Asset] | Get all assets in a category.
  get_asset_by_id(self, asset_id: str) -> Optional[Asset] | Get asset by ID.
  get_all_categories(self) -> List[str] | Get all available categories.
  to_thumbnail_items(self) -> Dict[str, List[dict]] | Convert to format suitable for ThumbnailMenu.
src.gamelib.loaders.gltf_loader.GltfLoader | Loads GLTF/GLB models and converts them to Mode...
  __init__(self, ctx: moderngl.Context) | Initialize loader.
  load(self, filepath: str) -> Model | Load a GLTF or GLB model.
  _parse_scene_hierarchy(self, gltf: pygltflib.GLTF2, materials: List[Material]) -> List[Mesh] | Parse the GLTF scene hierarchy and extract mesh...
  _process_node(self, gltf: pygltflib.GLTF2, node_idx: int, parent_transform: 'Matrix44', materials: List[Material], meshes: List[Mesh]) | Recursively process a node and its children, ac...
  _get_node_transform(self, node) -> 'Matrix44' | Extract transformation matrix from a GLTF node.
  _parse_meshes(self, gltf: pygltflib.GLTF2, materials: List[Material]) -> List[Mesh] | Parse all meshes from GLTF.
  _extract_vertex_data(self, gltf: pygltflib.GLTF2, primitive) -> Optional[Dict] | Extract vertex data from a primitive.
  _get_accessor_data(self, gltf: pygltflib.GLTF2, accessor_idx: int) -> Optional[np.ndarray] | Get data from an accessor.
  _generate_tangents(self, positions: np.ndarray, normals: np.ndarray, texcoords: np.ndarray) -> np.ndarray | Generate tangents using Lengyel's method.
  _generate_flat_normals(self, positions: np.ndarray) -> np.ndarray | Generate flat normals for a mesh (face normals).
  _create_vao(self, vertex_data: Dict) -> VAO | Create a ModernGL VAO from vertex data.
  _parse_materials(self, gltf: pygltflib.GLTF2, model_dir: Path) -> List[Material] | Parse all materials from GLTF.
  _load_texture_transform(self, texture_info) -> Optional[TextureTransform] | Load texture transform from GLTF texture info (...
  _load_texture(self, gltf: pygltflib.GLTF2, texture_idx: int, model_dir: Path) -> Optional[moderngl.Texture] | Load a texture from GLTF.
  _calculate_bounding_radius(self, gltf: pygltflib.GLTF2) -> float | Calculate bounding sphere radius for the model ...
  _compute_node_world_transforms(self, gltf: pygltflib.GLTF2) -> Dict[int, Matrix44] | Compute world transforms for all nodes, includi...
  _calculate_node_bounding_radius(self, gltf: pygltflib.GLTF2, node_idx: int, parent_transform: 'Matrix44') -> float | Recursively calculate bounding radius for a nod...
  _calculate_bounding_radius_simple(self, gltf: pygltflib.GLTF2) -> float | Simple bounding radius calculation without tran...
  _load_skeleton(self, gltf: pygltflib.GLTF2) -> Skeleton | Load skeleton from GLTF skins and nodes.
  _load_skins(self, gltf: pygltflib.GLTF2, skeleton: Skeleton, meshes: List[Mesh]) -> List[Skin] | Load skins from GLTF.
  _load_animations(self, gltf: pygltflib.GLTF2, skeleton: Skeleton) -> Dict[str, Animation] | Load animations from GLTF.
src.gamelib.loaders.material.Material | Represents a PBR material with textures.
  __init__(self, name: str) | Initialize material.
  has_base_color(self) -> bool | Check if material has base color texture
  has_normal_map(self) -> bool | Check if material has normal map
  has_metallic_roughness(self) -> bool | Check if material has metallic/roughness texture
  bind_textures(self, program: moderngl.Program) | Bind all material textures to shader.
  release(self) | Release GPU resources
src.gamelib.loaders.model.Mesh | Single mesh with geometry and material.
  __init__(self, vao, material: Material, local_transform: Matrix44, node_name: str, parent_transform: Matrix44) | Initialize mesh.
  render(self, program, parent_transform: Matrix44, ctx) | Render this mesh with optional parent transform.
src.gamelib.loaders.model.Model | Represents a complete GLTF/GLB model with multi...
  __init__(self, meshes: List[Mesh], position: Vector3, rotation: Vector3, scale: Vector3, name: str) | Initialize model.
  get_model_matrix(self) -> Matrix44 | Get the model transformation matrix.
  is_visible(self, frustum) -> bool | Test if this model is visible in the given frus...
  apply_physics_transform(self, position, orientation) -> None | Apply a transform from the physics simulation t...
  render(self, program, ctx) | Render all meshes in this model.
  update(self, delta_time: float) -> bool | Update model animations.
  play_animation(self, name: str, loop: bool) | Play an animation by name.
  stop_animation(self) | Stop current animation.
  release(self) | Release GPU resources
src.gamelib.loaders.scene_loader.SceneLoadResult | Result returned from :class:`SceneLoader`.
src.gamelib.loaders.scene_loader.SceneLoader | Load scenes from JSON descriptors.
  __init__(self, ctx, physics_world: Optional[PhysicsWorld])
  load_scene(self, path: Path | str) -> SceneLoadResult | Load a scene from disk.
  _attach_physics(self, instance, node: SceneNodeDefinition, base_path: Path) -> Optional[PhysicsBodyHandle]
  _instantiate_node(self, node: SceneNodeDefinition, base_path: Path)
  _create_primitive(self, node: SceneNodeDefinition, base_path: Path)
  _create_model(self, node: SceneNodeDefinition, base_path: Path)
src.gamelib.loaders.skybox_loader.SkyboxLoader | Load skybox cube maps from image files.
  __init__(self, ctx: moderngl.Context)
  load_from_directory(self, directory: Path | str, name: str | None, vertical_flip: bool) -> Skybox | Load a cube map using common face naming conven...
  _find_face_file(self, directory: Path, candidates: Iterable[str]) -> Path | None
src.gamelib.loaders.texture_transform.TextureTransform | Texture coordinate transformation (KHR_texture_...
  __init__(self, offset: Tuple[float, float], scale: Tuple[float, float], rotation: float, texcoord: int) | Initialize texture transform.
  _update_matrix(self) | Compute the 3x3 transformation matrix from offs...
  get_matrix(self) -> np.ndarray | Get the 3x3 transformation matrix.
  update(self, offset: Tuple[float, float], scale: Tuple[float, float], rotation: float) | Update transformation parameters and recompute ...
  identity() -> 'TextureTransform' | Create an identity transform (no transformation).
src.gamelib.physics.collision_meshes.CollisionMeshError(RuntimeError) | Raised when collision mesh configuration is inv...
src.gamelib.physics.collision_meshes.CollisionMeshResult | Information about a resolved collision mesh.
src.gamelib.physics.physics_world.PhysicsBodyConfig | Configuration describing how to construct a rig...
  from_dict(cls, payload: Dict[str, Any]) -> 'PhysicsBodyConfig' | Create a configuration object from a JSON-compa...
  is_dynamic(self) -> bool
  is_static(self) -> bool
  is_kinematic(self) -> bool
  resolved_mass(self) -> float | Return the effective mass for the rigid body.
src.gamelib.physics.physics_world.PhysicsBodyHandle | Handle returned when a rigid body is created.
src.gamelib.physics.physics_world.PhysicsWorld | Manage a PyBullet physics world and synchronize...
  __init__(self, settings: Optional[PhysicsWorldSettings]) -> None
  _configure_world(self) -> None | Apply global settings (gravity, time step, sear...
  shutdown(self) -> None | Disconnect the physics client.
  reset(self) -> None | Clear the world of all bodies.
  pause(self) -> None | Pause the physics simulation.
  resume(self) -> None | Resume the physics simulation.
  is_paused(self) -> bool | Check if physics simulation is paused.
  set_gravity(self, gravity: Tuple[float, float, float]) -> None
  set_time_step(self, fixed_time_step: float, max_substeps: Optional[int]) -> None
  configure_from_metadata(self, metadata: Dict[str, Any]) -> None | Apply optional settings provided in scene metad...
  _populate_config_defaults(self, config: PhysicsBodyConfig, scene_object: Any, node_definition: Any, resource_base: Optional[Path]) -> None | Fill in missing collider information based on t...
  _extract_scene_transform(self, scene_object: Any, config: PhysicsBodyConfig) -> Tuple[Tuple[float, float, float], Tuple[float, float, float, float]] | Return the position and orientation of the scen...
  _create_collision_shape(self, config: PhysicsBodyConfig) -> int | Create a PyBullet collision shape based on the ...
  _pre_step(self) -> None | Synchronise kinematic bodies before stepping th...
  _apply_angular_factor_overrides(self) -> None | Manually clamp angular velocity for bodies with...
  step_simulation(self, delta_time: float) -> None | Advance the simulation and push transforms back...
  sync_to_scene(self) -> None | Write simulated transforms back to associated s...
  create_body(self, scene_object: Any, config: PhysicsBodyConfig, node_definition: Any, resource_base: Optional[Path]) -> PhysicsBodyHandle | Create a rigid body and attach it to a scene ob...
  remove_body(self, body_id: int) -> None | Remove a body from the simulation.
  get_body(self, body_id: int) -> Optional[PhysicsBodyHandle]
  get_body_position(self, body_id: int) -> Tuple[float, float, float] | Return the world-space position of a body.
  get_body_orientation(self, body_id: int) -> Tuple[float, float, float, float] | Return the world-space orientation (quaternion)...
  set_body_transform(self, body_id: int, position: Optional[Tuple[float, float, float]], orientation: Optional[Tuple[float, float, float, float]]) -> None | Set the transform of a body, preserving unspeci...
  get_linear_velocity(self, body_id: int) -> Tuple[float, float, float] | Return the linear velocity of a body.
  set_linear_velocity(self, body_id: int, velocity: Tuple[float, float, float]) -> None | Set the linear velocity of a body.
  get_angular_velocity(self, body_id: int) -> Tuple[float, float, float] | Return the angular velocity of a body.
  set_angular_factor(self, body_id: int, factor: Tuple[float, float, float]) -> None | Lock or unlock angular axes for a body.
  apply_central_impulse(self, body_id: int, impulse: Tuple[float, float, float]) -> None | Apply an instantaneous impulse at the centre of...
  ray_test(self, from_pos: Tuple[float, float, float], to_pos: Tuple[float, float, float]) -> Optional[Dict[str, Any]] | Perform a ray test and return the closest hit, ...
  ray_test_all(self, from_pos: Tuple[float, float, float], to_pos: Tuple[float, float, float]) -> List[Dict[str, Any]] | Perform a ray test and return all hits along th...
  get_contacts(self, body_id: Optional[int], other_body_id: Optional[int]) -> List[Dict[str, Any]] | Return contact information for the current simu...
  debug_snapshot(self) -> Dict[str, Any] | Return a snapshot of body transforms and active...
src.gamelib.physics.physics_world.PhysicsWorldSettings | Settings that control global physics simulation...
src.gamelib.rendering.antialiasing_renderer.AAMode(Enum) | Anti-aliasing modes
src.gamelib.rendering.antialiasing_renderer.AntiAliasingRenderer | Handles MSAA and FXAA anti-aliasing.
  __init__(self, ctx: moderngl.Context, size: Tuple[int, int], fxaa_program: moderngl.Program, smaa_edge_program: Optional[moderngl.Program], smaa_blend_program: Optional[moderngl.Program], smaa_neighborhood_program: Optional[moderngl.Program]) | Initialize anti-aliasing renderer.
  _create_fullscreen_quad(self) | Create geometry for full-screen quad
  _create_framebuffers(self) | Create framebuffers for current AA mode
  _cleanup_framebuffers(self) | Clean up existing framebuffers
  set_aa_mode(self, mode: AAMode) | Set anti-aliasing mode.
  get_render_target(self) -> moderngl.Framebuffer | Get the framebuffer to render into.
  resolve_and_present(self) | Resolve MSAA, apply post-processing (FXAA/SMAA)...
  _apply_fxaa(self) | Apply FXAA post-processing
  _apply_smaa(self) | Apply SMAA post-processing
  _present_to_screen(self, texture: moderngl.Texture) | Present a texture to the screen.
  cycle_aa_mode(self) -> AAMode | Cycle to the next AA mode.
  toggle_msaa(self) -> bool | Toggle MSAA on/off.
  toggle_fxaa(self) -> bool | Toggle FXAA on/off.
  toggle_smaa(self) -> bool | Toggle SMAA on/off.
  get_aa_mode_name(self) -> str | Get human-readable name for current AA mode.
  resize(self, size: Tuple[int, int]) | Resize framebuffers for new screen size.
  cleanup(self) | Clean up resources
src.gamelib.rendering.bloom_renderer.BloomRenderer | Bloom post-processing pipeline.
  __init__(self, ctx: moderngl.Context, size: Tuple[int, int], downsample_program: moderngl.Program, upsample_program: moderngl.Program, composite_program: moderngl.Program) -> None
  _create_fullscreen_quad(self) -> None | Create VAOs shared by all bloom passes.
  _allocate_levels(self, size: Tuple[int, int]) -> None | Allocate bloom mip-chain resources for the curr...
  _release_levels(self) -> None | Release GPU resources for all mip levels.
  resize(self, size: Tuple[int, int]) -> None | Resize bloom render targets when the viewport c...
  apply(self, emissive_texture: moderngl.Texture, viewport: Tuple[int, int, int, int], target: moderngl.Framebuffer) -> None | Run the bloom pipeline and composite the blurre...
src.gamelib.rendering.bloom_renderer._BloomLevel | Container storing textures and framebuffers for...
src.gamelib.rendering.gbuffer.GBuffer | G-Buffer for deferred rendering.
  __init__(self, ctx: moderngl.Context, size: Tuple[int, int]) | Initialize G-Buffer.
  _create_textures(self) | Create all G-Buffer textures.
  _create_framebuffer(self) | Create framebuffer with multiple color attachme...
  resize(self, size: Tuple[int, int]) | Resize G-Buffer (called on window resize).
  clear(self, color: Tuple[float, float, float, float]) | Clear G-Buffer.
  use(self) | Bind G-Buffer framebuffer for rendering (geomet...
  bind_textures(self, start_location: int) | Bind all G-Buffer textures for reading (lightin...
  release(self) | Release all G-Buffer resources.
  viewport(self) -> Tuple[int, int, int, int] | Get viewport tuple for this buffer.
src.gamelib.rendering.geometry_renderer.GeometryRenderer | Renders scene geometry to G-Buffer.
  __init__(self, ctx: moderngl.Context, geometry_program: moderngl.Program, geometry_textured_program: moderngl.Program, unlit_program: moderngl.Program, geometry_textured_skinned_program: moderngl.Program) | Initialize geometry renderer.
  render(self, scene: Scene, camera: Camera, gbuffer: GBuffer) | Render scene geometry to G-Buffer with frustum ...
  _set_camera_uniforms(self, camera: Camera, viewport_size: Tuple[int, int]) | Set camera-related shader uniforms.
  _set_camera_uniforms_textured(self, camera: Camera, viewport_size: Tuple[int, int]) | Set camera-related shader uniforms for textured...
  _set_camera_uniforms_unlit(self, camera: Camera, viewport_size: Tuple[int, int]) | Set camera-related shader uniforms for unlit pr...
  _set_camera_uniforms_textured_skinned(self, camera: Camera, viewport_size: Tuple[int, int]) | Set camera-related shader uniforms for skinned ...
src.gamelib.rendering.icon_manager.IconDrawData | Resolved draw information for a single icon.
src.gamelib.rendering.icon_manager.IconManager | Loads and manages HUD/UI icons as textured quads.
  __init__(self, ctx: moderngl.Context) -> None
  _get_or_create_resource(self, image_path: Path) -> _IconResource
  add_icon(self, image_path: Path, position: Tuple[float, float], size: Optional[Tuple[float, float]], color: Tuple[float, float, float, float], layer: str) -> int
  remove_icon(self, icon_id: int) -> None
  update_position(self, icon_id: int, position: Tuple[float, float]) -> None
  update_size(self, icon_id: int, size: Tuple[float, float]) -> None
  update_color(self, icon_id: int, color: Tuple[float, float, float, float]) -> None
  update_image(self, icon_id: int, image_path: Path) -> None
  get_all_layers(self) -> List[str]
  get_draw_data_for_layer(self, layer: str) -> List[IconDrawData]
  has_icons(self) -> bool
  release(self) -> None
src.gamelib.rendering.icon_manager._IconInstance | Instance of an icon placed on screen.
src.gamelib.rendering.icon_manager._IconResource | Loaded texture resource for an icon.
src.gamelib.rendering.light_debug_renderer.LightDebugRenderer | Draw debug gizmos for lights to aid placement a...
  __init__(self, ctx: moderngl.Context, program: moderngl.Program)
  render(self, camera: Camera, lights: Iterable[Light], viewport: Tuple[int, int, int, int]) | Render gizmos for all provided lights.
src.gamelib.rendering.lighting_renderer.LightingRenderer | Renders lighting using G-Buffer data.
  __init__(self, ctx: moderngl.Context, lighting_program: moderngl.Program, ambient_program: moderngl.Program, emissive_program: moderngl.Program) | Initialize lighting renderer.
  _create_fullscreen_quad(self) | Create a full-screen quad geometry.
  render(self, lights: List[Light], gbuffer: GBuffer, camera: Camera, viewport: tuple, ssao_texture: moderngl.Texture, skybox: Optional[Skybox], time: float | None, apply_post_lighting) | Render all lighting to the screen.
  render_to_target(self, lights: List[Light], gbuffer: GBuffer, camera: Camera, viewport: tuple, target: moderngl.Framebuffer, ssao_texture: moderngl.Texture, skybox: Optional[Skybox], time: float | None, apply_post_lighting) | Render all lighting to a specific target.
  _prepare_lights_for_rendering(self, lights: List[Light], camera: Camera) -> List[Light] | Sort lights by importance and apply budget limit.
  _render_ambient(self, gbuffer: GBuffer, ssao_texture: moderngl.Texture, inverse_view: np.ndarray | None, inverse_projection: np.ndarray | None, skybox: Optional[Skybox], camera: Camera | None, viewport: tuple | None, time: float | None) | Render ambient lighting pass.
  _render_light(self, light: Light, light_index: int, camera: Camera, inverse_view: np.ndarray, time: float) | Render a single light's contribution.
  _render_emissive(self, gbuffer: GBuffer, camera: Camera, inverse_view: np.ndarray, time: float) | Render emissive contribution pass.
  _set_fog_uniforms(self, program: moderngl.Program, time: float) | Write fog parameters into the provided shader p...
src.gamelib.rendering.main_renderer.MainRenderer | Renders the main scene with lighting and shadows.
  __init__(self, ctx: moderngl.Context, main_program: moderngl.Program, skybox_renderer: Optional[SkyboxRenderer]) | Initialize main renderer.
  render(self, scene: Scene, camera: Camera, lights: List[Light], viewport: Tuple[int, int, int, int], skybox: Optional[Skybox], time: float | None) | Render the main scene with frustum culling.
  render_to_target(self, scene: Scene, camera: Camera, lights: List[Light], viewport: Tuple[int, int, int, int], target: moderngl.Framebuffer, skybox: Optional[Skybox], time: float | None) | Render the main scene to a specific framebuffer.
  _bind_shadow_maps(self, lights: List[Light]) | Bind all shadow map textures.
  _set_camera_uniforms(self, camera: Camera, viewport: Tuple[int, int, int, int]) | Set camera-related shader uniforms.
  _set_light_uniforms(self, lights: List[Light]) | Set light-related shader uniforms.
  _set_fog_uniforms(self, time: float) | Set fog-related shader uniforms.
src.gamelib.rendering.pause_effects.PauseEffects | Renders pause menu visual effects (dim overlay,...
  __init__(self, ctx: moderngl.Context, window_size: tuple[int, int]) | Initialize pause effects renderer.
  _update_projection(self) | Update orthographic projection matrix for curre...
  resize(self, width: int, height: int) | Handle window resize.
  render_dim_overlay(self, dim_alpha: float) | Render semi-transparent dim overlay.
  shutdown(self) | Clean up resources.
src.gamelib.rendering.render_pipeline.RenderPipeline | Complete rendering pipeline.
  __init__(self, ctx: moderngl.Context, window) | Initialize rendering pipeline.
  initialize_lights(self, lights: List[Light], camera: Camera) | Initialize shadow maps for lights with adaptive...
  render_frame(self, scene: Scene, camera: Camera, lights: List[Light], time: float | None) | Render a complete frame.
  resize(self, size: Tuple[int, int]) | Resize internal render targets and update cache...
  _render_forward(self, scene: Scene, camera: Camera, lights: List[Light], time: float | None) | Render using forward rendering.
  _render_deferred(self, scene: Scene, camera: Camera, lights: List[Light], time: float | None) | Render using deferred rendering.
  get_shader(self, name: str) -> moderngl.Program | Get a loaded shader program.
  _render_light_debug(self, camera: Camera, lights: List[Light]) -> None | Render light gizmos when enabled.
  cycle_aa_mode(self) | Cycle to the next anti-aliasing mode
  toggle_msaa(self) | Toggle MSAA on/off
  toggle_fxaa(self) | Toggle FXAA on/off
  toggle_smaa(self) | Toggle SMAA on/off
  get_aa_mode_name(self) -> str | Get current anti-aliasing mode name
  toggle_light_gizmos(self) | Toggle debug light gizmo rendering.
  reload_shaders(self) | Reload all shaders.
src.gamelib.rendering.selection_highlight.SelectionHighlight | Renders outline/highlight around selected object.
  __init__(self, ctx: moderngl.Context) | Initialize selection highlight renderer.
  set_selected_object(self, obj: Optional[SceneObject]) -> None | Set the object to highlight.
  render(self, view_matrix: Matrix44, projection_matrix: Matrix44) -> None | Render selection highlight around selected object.
  render_tint(self, obj: SceneObject, view_matrix: Matrix44, projection_matrix: Matrix44, tint_color: Vector3) -> None | Render object with tint color overlay (alternat...
  set_highlight_color(self, color: Vector3) -> None | Set highlight color.
  set_outline_scale(self, scale: float) -> None | Set outline thickness.
  _build_model_matrix(self, obj: SceneObject) -> Matrix44 | Build model matrix from object position, rotati...
src.gamelib.rendering.shader_manager.ShaderManager | Loads and manages shader programs.
  __init__(self, ctx: moderngl.Context, shader_dir: Path) | Initialize shader manager.
  load_program(self, name: str, vert_file: str, frag_file: str) -> moderngl.Program | Load a shader program from vertex and fragment ...
  get(self, name: str) -> moderngl.Program | Get a loaded shader program by name.
  has(self, name: str) -> bool | Check if a program is loaded
  reload(self, name: str) -> moderngl.Program | Reload a shader program (useful for hot-reloadi...
src.gamelib.rendering.shadow_renderer.ShadowRenderer | Renders shadow maps for shadow-casting lights.
  __init__(self, ctx: moderngl.Context, shadow_program: moderngl.Program, shadow_size: int) | Initialize shadow renderer.
  set_screen_viewport(self, viewport: Tuple[int, int, int, int]) -> None | Persist the default screen viewport to restore ...
  create_shadow_map(self, resolution: Optional[int]) -> Tuple[moderngl.Texture, moderngl.Framebuffer] | Create a shadow map texture and framebuffer.
  _calculate_shadow_resolution(self, light: Light, camera_position) -> int | Calculate appropriate shadow map resolution for...
  initialize_light_shadow_maps(self, lights: List[Light], camera_position) | Create shadow maps for shadow-casting lights th...
  render_shadow_maps(self, lights: List[Light], scene: Scene) | Render shadow maps for all lights with optimiza...
  render_single_shadow_map(self, light: Light, scene: Scene) | Render shadow map for a single light with frust...
src.gamelib.rendering.skybox_renderer.SkyboxRenderer | Render a skybox cube map using a dedicated shader.
  __init__(self, ctx: moderngl.Context, program: moderngl.Program)
  render(self, camera: Camera, skybox: Optional[Skybox], viewport: Tuple[int, int, int, int]) -> None | Render the provided skybox using the current fr...
src.gamelib.rendering.smaa_renderer.SMAARenderer | SMAA (Subpixel Morphological Antialiasing) Rend...
  __init__(self, ctx: moderngl.Context, size: Tuple[int, int], edge_program: moderngl.Program, blend_program: moderngl.Program, neighborhood_program: moderngl.Program) | Initialize SMAA renderer.
  _create_fullscreen_quad(self) | Create geometry for full-screen quad
  _create_vao(self, program: moderngl.Program) -> moderngl.VertexArray | Create VAO for a specific program
  _create_framebuffers(self) | Create framebuffers for SMAA passes
  _create_lookup_textures(self) | Create precomputed lookup textures for SMAA usi...
  apply_smaa(self, input_texture: moderngl.Texture, output_fbo: moderngl.Framebuffer) | Apply SMAA to input texture and render to outpu...
  _edge_detection_pass(self, input_texture: moderngl.Texture, rt_metrics: tuple) | Pass 1: Edge Detection
  _blending_weight_pass(self, rt_metrics: tuple) | Pass 2: Blending Weight Calculation
  _neighborhood_blending_pass(self, input_texture: moderngl.Texture, output_fbo: moderngl.Framebuffer, rt_metrics: tuple) | Pass 3: Neighborhood Blending
  resize(self, size: Tuple[int, int]) | Resize framebuffers for new screen size.
  _cleanup_framebuffers(self) | Clean up framebuffers
  cleanup(self) | Clean up all resources
src.gamelib.rendering.ssao_renderer.SSAORenderer | Screen Space Ambient Occlusion renderer.
  __init__(self, ctx: moderngl.Context, size: Tuple[int, int], ssao_program: moderngl.Program, blur_program: moderngl.Program) | Initialize SSAO renderer.
  _create_textures(self) | Create SSAO textures.
  _create_framebuffers(self) | Create framebuffers for SSAO passes.
  _generate_kernel(self, kernel_size: int) | Generate sample kernel for SSAO.
  _generate_noise_texture(self, noise_size: int) | Generate random rotation noise texture.
  _create_fullscreen_quad(self) | Create a fullscreen quad for post-processing pa...
  render(self, position_texture: moderngl.Texture, normal_texture: moderngl.Texture, projection_matrix: np.ndarray, radius: float, bias: float, intensity: float) | Render SSAO effect.
  resize(self, size: Tuple[int, int]) | Resize SSAO buffers.
  get_ssao_texture(self) -> moderngl.Texture | Get final blurred SSAO texture.
  release(self) | Release all SSAO resources.
src.gamelib.rendering.text_manager.TextManager | Manages text objects and generates geometry fro...
  __init__(self, font_path: str, font_size: int, line_spacing: Optional[int]) -> None
  add_text(self, text: str, position: Tuple[float, float], color: Tuple[float, float, float, float], scale: float, layer: str, background_color: Optional[Tuple[float, float, float, float]], background_padding: float) -> int
  update_text(self, text_id: int, text: str) -> None
  update_position(self, text_id: int, position: Tuple[float, float]) -> None
  update_color(self, text_id: int, color: Tuple[float, float, float, float]) -> None
  update_background(self, text_id: int, background_color: Optional[Tuple[float, float, float, float]], background_padding: Optional[float]) -> None
  update_scale(self, text_id: int, scale: float) -> None
  remove_text(self, text_id: int) -> None
  clear_layer(self, layer: str) -> None
  get_all_layers(self) -> List[str]
  get_layer_geometry(self, layer: str) -> Optional[Dict[str, np.ndarray]]
  get_line_height(self) -> int
  refresh_layout_metrics(self) -> None | Mark all layers dirty so cached geometry is reb...
  release(self) -> None
  _rebuild_layer_geometry(self, layer: str) -> None
  _get_text_geometry(self, text: str) -> _CachedGeometry
  _rasterize_text(self, text: str) -> _CachedGeometry
src.gamelib.rendering.text_manager._CachedGeometry
src.gamelib.rendering.text_manager._LayerGeometry
src.gamelib.rendering.text_manager._TextObject
src.gamelib.rendering.thumbnail_generator.ThumbnailGenerator | Generates and caches thumbnail images for assets.
  __init__(self, ctx: moderngl.Context, thumbnail_size: int) | Initialize thumbnail generator.
  _create_framebuffer(self) -> None | Create framebuffer and texture for thumbnail re...
  generate_model_thumbnail(self, model_path: str, model_name: str, force_regenerate: bool) -> Optional[Path] | Generate thumbnail for a 3D model.
  generate_light_preset_thumbnails(self, light_presets: dict) -> dict | Generate thumbnails for light presets.
  _render_model_thumbnail(self, model: SceneObject) -> None | Render model to thumbnail framebuffer.
  _render_light_thumbnail(self, color: tuple) -> None | Render light preset thumbnail (colored sphere).
  _render_with_basic_shader(self, model: SceneObject, view: Matrix44, projection: Matrix44) -> None | Fallback rendering using basic shader.
  _build_model_matrix(self, obj: SceneObject) -> Matrix44 | Build model matrix from object transform.
  _save_framebuffer_to_png(self, path: Path) -> None | Save framebuffer contents to PNG file.
  _write_png(self, path: Path, image_data: np.ndarray) -> None | Write simple PNG file (without external PNG lib...
src.gamelib.rendering.transparent_renderer.TransparentRenderer | Renders transparent objects using forward rende...
  __init__(self, ctx: moderngl.Context, transparent_program: moderngl.Program) | Initialize transparent renderer.
  render(self, scene: Scene, camera: Camera, lights: List[Light], screen_fbo: moderngl.Framebuffer, shadow_maps: List[moderngl.Texture], viewport_size: Tuple[int, int], time: float) | Render transparent objects with forward renderi...
  resize(self, viewport_size: Tuple[int, int]) | Hook for future resize-specific logic (currentl...
  _set_camera_uniforms(self, camera: Camera, aspect_ratio: float) | Set camera-related shader uniforms.
  _set_lighting_uniforms(self, lights: List[Light], shadow_maps: List[moderngl.Texture]) | Set lighting uniforms for forward rendering.
  _set_fog_uniforms(self, time: float) | Populate fog configuration uniforms for the tra...
  _depth_sort_meshes(self, meshes: List[Tuple], camera_pos: Vector3) -> List[Tuple] | Sort transparent meshes back-to-front based on ...
src.gamelib.rendering.ui_renderer.UIRenderer | Render prebuilt text geometry as the final over...
  __init__(self, ctx: moderngl.Context, shader_program: moderngl.Program)
  render(self, text_manager: TextManager, screen_size: Tuple[int, int])
  _get_or_create_vao(self, layer: str, geometry: Dict) -> moderngl.VertexArray
  _setup_ui_state(self)
  _restore_state(self)
  _create_ortho_matrix(self, screen_size: Tuple[int, int]) -> np.ndarray
  resize(self, screen_size: Tuple[int, int])
  release(self)
src.gamelib.rendering.ui_sprite_renderer.UISpriteRenderer | Render icon quads in screen space as part of th...
  __init__(self, ctx: moderngl.Context, shader_program: moderngl.Program)
  render(self, icon_manager: IconManager, screen_size: Tuple[int, int])
  _render_icon(self, draw)
  _setup_state(self)
  _restore_state(self)
  _create_ortho_matrix(self, screen_size: Tuple[int, int])
  resize(self, _screen_size: Tuple[int, int])
  release(self)
src.gamelib.tools.editor.delete_tool.DeleteTool(EditorTool) | Tool for deleting objects and lights via raycas...
  __init__(self, definition: 'ToolDefinition', ctx) | Initialize delete tool.
  use(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Delete object under cursor.
  use_secondary(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Secondary action (unused for delete tool).
  update(self, delta_time: float, camera: 'Camera', scene: 'Scene') | Update tool state and highlight object under cu...
  on_equipped(self) | Called when tool is equipped.
  on_unequipped(self) | Called when tool is unequipped.
  _raycast_objects(self, camera: 'Camera', scene: 'Scene') -> Optional[tuple] | Raycast from camera to find object under cursor.
  get_highlighted_object(self) -> Optional['SceneObject'] | Get the currently highlighted object.
src.gamelib.tools.editor.light_editor_tool.LightEditorTool(EditorTool) | Tool for editing lights in the scene.
  __init__(self, definition: 'ToolDefinition', ctx) | Initialize light editor tool.
  use(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Place a new light at cursor position.
  use_secondary(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Select or move existing light.
  update(self, delta_time: float, camera: 'Camera', scene: 'Scene') | Update placement position and light preview.
  finish_move(self) | Finish moving a light and record in history.
  delete_selected(self) | Delete the currently selected light.
  set_light_type(self, light_type: str) | Set the type of light to place.
  set_light_color(self, color: Vector3) | Set the color of lights to place.
  set_light_intensity(self, intensity: float) | Set the intensity of lights to place.
  on_equipped(self) | Called when tool is equipped.
  on_unequipped(self) | Called when tool is unequipped.
  _update_light_move(self, camera: 'Camera', scene: 'Scene') | Update light position during move operation.
  _select_nearest_light(self, camera: 'Camera') -> Optional['Light'] | Select the light nearest to the cursor.
  _get_light_at_cursor(self, camera: 'Camera') -> Optional['Light'] | Get light under cursor (for highlighting).
  get_selected_light(self) -> Optional['Light'] | Get the currently selected light.
  get_highlighted_light(self) -> Optional['Light'] | Get the currently highlighted light.
src.gamelib.tools.editor.model_placement_tool.ModelPlacementTool(EditorTool) | Tool for placing models from a library.
  __init__(self, definition: 'ToolDefinition', ctx) | Initialize model placement tool.
  _load_model_library(self) | Load available models from configured directory.
  select_model_by_index(self, index: int) | Select a model from the library by index.
  select_next_model(self) | Select next model in library (cycle).
  select_previous_model(self) | Select previous model in library (cycle).
  _load_preview_model(self) | Load the selected model for preview.
  use(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Place model at current preview position.
  use_secondary(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Rotate preview (continuous drag).
  update(self, delta_time: float, camera: 'Camera', scene: 'Scene') | Update preview position and validation.
  _validate_placement(self, scene: 'Scene') -> bool | Check if current placement is valid.
  rotate_preview(self, angle_degrees: float) | Rotate preview by fixed angle (discrete rotation).
  on_equipped(self) | Called when tool is equipped.
  on_unequipped(self) | Called when tool is unequipped.
  render_preview(self, program, textured_program, preview_program, camera, lights, shadow_maps) | Render placement preview.
  get_current_model_name(self) -> str | Get the name of the currently selected model.
  get_model_count(self) -> int | Get the number of available models.
src.gamelib.tools.editor.object_editor_tool.ObjectEditorTool(EditorTool) | Multi-purpose object manipulation tool.
  __init__(self, definition: 'ToolDefinition', ctx) | Initialize object editor tool.
  use(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Primary action: Select object or start move ope...
  use_secondary(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Secondary action: Rotate selected object (conti...
  update(self, delta_time: float, camera: 'Camera', scene: 'Scene') | Update tool state and highlight objects.
  finish_move(self) | Finish move operation and record in history.
  finish_rotate(self) | Finish rotate operation and record in history.
  rotate_selected(self, angle_degrees: float) | Rotate selected object by a fixed angle (discre...
  delete_selected(self, scene: 'Scene') | Delete the currently selected object.
  duplicate_selected(self) | Duplicate the currently selected object.
  on_equipped(self) | Called when tool is equipped.
  on_unequipped(self) | Called when tool is unequipped.
  _update_move(self, camera: 'Camera', scene: 'Scene') | Update object position during move operation.
  _raycast_objects(self, camera: 'Camera', scene: 'Scene') -> Optional[tuple] | Raycast from camera to find object under cursor.
  get_selected_object(self) -> Optional['SceneObject'] | Get the currently selected object.
  get_highlighted_object(self) -> Optional['SceneObject'] | Get the currently highlighted object.
src.gamelib.tools.editor_history.DeleteLightOperation(EditorOperation) | Delete a light from the scene.
  __init__(self, light: 'Light', lights_list: List['Light']) | Initialize delete light operation.
  execute(self, scene: 'Scene') -> bool | Remove light from lights list.
  undo(self, scene: 'Scene') | Restore light to lights list.
  get_description(self) -> str
src.gamelib.tools.editor_history.DeleteObjectOperation(EditorOperation) | Delete an object from the scene.
  __init__(self, obj: 'SceneObject') | Initialize delete operation.
  execute(self, scene: 'Scene') -> bool | Remove object from scene.
  undo(self, scene: 'Scene') | Restore object to scene.
  get_description(self) -> str
src.gamelib.tools.editor_history.EditorHistory | Manages undo/redo history for the level editor.
  __init__(self, max_history: int) | Initialize editor history.
  execute(self, operation: EditorOperation, scene: 'Scene') | Execute an operation and add it to history.
  undo(self, scene: 'Scene') -> bool | Undo the last operation.
  redo(self, scene: 'Scene') -> bool | Redo the last undone operation.
  can_undo(self) -> bool | Check if there are operations to undo.
  can_redo(self) -> bool | Check if there are operations to redo.
  get_undo_description(self) -> Optional[str] | Get description of next undo operation.
  get_redo_description(self) -> Optional[str] | Get description of next redo operation.
  clear(self) | Clear all history.
src.gamelib.tools.editor_history.EditorOperation(ABC) | Abstract base class for undoable editor operati...
  execute(self, scene: 'Scene') -> bool | Execute the operation.
  undo(self, scene: 'Scene') | Undo the operation.
  get_description(self) -> str | Get human-readable description of this operation.
src.gamelib.tools.editor_history.MoveObjectOperation(EditorOperation) | Move an object to a new position.
  __init__(self, obj: 'SceneObject', old_position: Vector3, new_position: Vector3) | Initialize move operation.
  execute(self, scene: 'Scene') -> bool | Move object to new position.
  undo(self, scene: 'Scene') | Restore object to old position.
  get_description(self) -> str
src.gamelib.tools.editor_history.PlaceLightOperation(EditorOperation) | Place a new light in the scene.
  __init__(self, light: 'Light', lights_list: List['Light'], render_pipeline, camera) | Initialize place light operation.
  execute(self, scene: 'Scene') -> bool | Add light to lights list and initialize shadow ...
  undo(self, scene: 'Scene') | Remove light from lights list.
  get_description(self) -> str
src.gamelib.tools.editor_history.PlaceObjectOperation(EditorOperation) | Place a new object in the scene.
  __init__(self, obj: 'SceneObject') | Initialize place operation.
  execute(self, scene: 'Scene') -> bool | Add object to scene.
  undo(self, scene: 'Scene') | Remove object from scene.
  get_description(self) -> str
src.gamelib.tools.editor_history.RotateObjectOperation(EditorOperation) | Rotate an object.
  __init__(self, obj: 'SceneObject', old_rotation, new_rotation) | Initialize rotate operation.
  execute(self, scene: 'Scene') -> bool | Rotate object to new orientation.
  undo(self, scene: 'Scene') | Restore object to old orientation.
  get_description(self) -> str
src.gamelib.tools.editor_history.ScaleObjectOperation(EditorOperation) | Scale an object.
  __init__(self, obj: 'SceneObject', old_scale: Vector3, new_scale: Vector3) | Initialize scale operation.
  execute(self, scene: 'Scene') -> bool | Scale object to new size.
  undo(self, scene: 'Scene') | Restore object to old size.
  get_description(self) -> str
src.gamelib.tools.grid_overlay.GridOverlay | Renders a visual grid overlay for level editing.
  __init__(self, ctx: moderngl.Context, grid_size: float, grid_extent: int) | Initialize grid overlay.
  _generate_grid_geometry(self) | Generate grid line vertices with much larger ex...
  _create_shader_program(self) | Create simple shader for grid lines.
  render(self, view_matrix: Matrix44, projection_matrix: Matrix44, camera_pos: Vector3 | None) | Render the grid overlay.
  set_visible(self, visible: bool) | Set grid visibility.
  toggle_visible(self) | Toggle grid visibility.
  set_grid_size(self, size: float) | Change grid cell size.
  set_grid_extent(self, extent: int) | Change grid extent (number of lines).
  close(self) | Explicitly release GL resources.
src.gamelib.tools.inventory.Inventory | Manages tool inventory with hotbar and storage.
  __init__(self) | Initialize empty inventory.
  add_tool(self, tool_id: str, category: ToolCategory) | Add a tool to inventory.
  remove_tool(self, tool_id: str) | Remove a tool from inventory.
  assign_to_hotbar(self, tool_id: str, slot: int) -> bool | Assign a tool to a hotbar slot.
  clear_hotbar_slot(self, slot: int) | Clear a hotbar slot.
  get_hotbar_tool(self, slot: int) -> Optional[str] | Get tool ID in a hotbar slot.
  get_tools_by_category(self, category: ToolCategory) -> List[str] | Get all tools in a category.
  has_tool(self, tool_id: str) -> bool | Check if inventory contains a tool.
  get_all_tools(self) -> List[str] | Get all tool IDs in inventory.
  find_next_hotbar_slot(self, current_slot: int, direction: int) -> Optional[int] | Find the next non-empty hotbar slot.
  auto_assign_to_hotbar(self) | Auto-assign tools to hotbar slots.
src.gamelib.tools.placement_preview.PlacementPreview | Renders a transparent preview of an object bein...
  __init__(self, ctx: moderngl.Context) | Initialize placement preview.
  set_model(self, model: 'Model') | Set a Model to preview.
  set_scene_object(self, scene_object: 'SceneObject') | Set a SceneObject to preview.
  update_transform(self, position: Vector3, rotation: Vector3, is_valid: bool) | Update preview position, rotation, and validity.
  hide(self) | Hide the preview.
  render_to_scene(self, scene: 'Scene') | Add preview model to scene for rendering via no...
  remove_from_scene(self, scene: 'Scene') | Remove preview model from scene after rendering.
  get_transform_matrix(self) -> Matrix44 | Get the current transform matrix.
src.gamelib.tools.tool_base.EditorTool(Tool) | Base class for level editor tools.
  __init__(self, definition: ToolDefinition)
  snap_to_grid(self, position: Vector3) -> Vector3 | Snap a position to the grid.
  raycast_scene(self, camera: 'Camera', scene: 'Scene') -> Optional[tuple] | Raycast from camera into scene.
src.gamelib.tools.tool_base.Tool(ABC) | Abstract base class for all tools.
  __init__(self, definition: ToolDefinition) | Initialize tool from definition.
  use(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Use the tool (primary action, typically left cl...
  use_secondary(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Use tool's secondary action (typically right cl...
  update(self, delta_time: float, camera: 'Camera', scene: 'Scene') | Update tool state (cooldowns, continuous action...
  _start_use(self) | Begin using the tool.
  _finish_use(self) | Finish using the tool.
  can_use(self) -> bool | Check if tool can be used right now.
  on_equipped(self) | Called when tool becomes active (equipped by pl...
  on_unequipped(self) | Called when tool is deactivated (switched to an...
  get_property(self, key: str, default) | Get a property from the tool's JSON definition.
src.gamelib.tools.tool_category.ToolCategory(Enum) | Tool categories for organization and filtering.
src.gamelib.tools.tool_definition.ToolDefinition | Data descriptor for a tool loaded from JSON.
  from_dict(cls, data: Dict[str, Any]) -> 'ToolDefinition' | Create a tool definition from JSON data.
src.gamelib.tools.tool_definition.ToolsetDefinition | Container for multiple tool definitions loaded ...
  from_dict(cls, data: Dict[str, Any]) -> 'ToolsetDefinition' | Load a toolset from JSON data.
src.gamelib.tools.tool_manager.ToolManager | Central manager for all tools in the game.
  __init__(self, ctx) | Initialize tool manager.
  register_tool(self, tool: Tool) | Register a tool instance.
  load_tools_from_json(self, path: Path | str) | Load tools from a JSON file.
  _instantiate_tool(self, definition) -> Optional[Tool] | Instantiate a tool from its definition.
  equip_tool(self, tool_id: str) -> bool | Equip a tool by its ID.
  equip_hotbar_slot(self, slot: int) -> bool | Equip tool from hotbar slot.
  next_tool(self) | Cycle to next tool in hotbar (scroll wheel up).
  previous_tool(self) | Cycle to previous tool in hotbar (scroll wheel ...
  use_active_tool(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Use the active tool's primary action.
  use_active_tool_secondary(self, camera: 'Camera', scene: 'Scene', **kwargs) -> bool | Use the active tool's secondary action.
  update(self, delta_time: float, camera: 'Camera', scene: 'Scene') | Update active tool.
  get_active_tool(self) -> Optional[Tool] | Get the currently active tool.
  get_active_slot(self) -> int | Get the currently active hotbar slot.
src.gamelib.tools.tool_state.ToolState(Enum) | State machine for tool usage.
src.gamelib.ui.menus.main_menu.MainMenu | Main menu for scene selection and game start.
  __init__(self, scene_manager: SceneManager) | Initialize main menu.
  draw(self, screen_width: int, screen_height: int) -> tuple[bool, Optional[str]] | Draw main menu.
src.gamelib.ui.menus.object_inspector.ObjectInspector | Inspector panel for editing selected object pro...
  __init__(self) | Initialize object inspector.
  draw(self, screen_width: int, screen_height: int, force_show: bool) -> None | Draw object inspector panel (docked on right si...
  _draw_preview_mode(self) -> None | Draw preview mode for items from thumbnail menu.
  _draw_edit_mode(self) -> None | Draw edit mode for scene objects.
  _draw_transform_section(self) | Draw transform properties (position, rotation, ...
  _draw_appearance_section(self) | Draw appearance properties (color, material, et...
  _draw_physics_section(self) | Draw physics properties.
  _draw_advanced_section(self) | Draw advanced properties.
  _draw_preview_transform_section(self) -> None | Draw transform settings for preview item.
  _draw_preview_appearance_section(self) -> None | Draw appearance settings for preview item.
  _draw_preview_physics_section(self) -> None | Draw physics settings for preview item.
  set_selected_object(self, obj: Optional[SceneObject]) | Set the currently selected object.
  set_preview_item(self, item: Optional[dict]) | Set preview item from thumbnail menu.
src.gamelib.ui.menus.pause_menu.PauseMenu | Pause menu for in-game controls.
  __init__(self, scene_manager: SceneManager) | Initialize pause menu.
  draw(self, screen_width: int, screen_height: int) -> tuple[bool, Optional[str]] | Draw pause menu.
  _draw_scene_picker(self, screen_width: int, screen_height: int) -> tuple[bool, Optional[str]] | Draw scene picker submenu.
src.gamelib.ui.menus.settings_menu.SettingsMenu | Settings menu with tabs for different categories.
  __init__(self, render_pipeline: RenderPipeline, key_bindings: KeyBindings, ui_manager) | Initialize settings menu.
  draw(self, screen_width: int, screen_height: int) -> tuple[bool, Optional[str]] | Draw settings menu.
  _draw_graphics_tab(self) | Draw graphics settings tab.
  _draw_controls_tab(self) | Draw controls rebinding tab.
  _draw_gameplay_tab(self) | Draw gameplay settings tab.
  _draw_ui_tab(self) | Draw UI settings tab.
  _apply_settings(self) | Apply all pending settings changes.
  reset_to_defaults(self) | Reset all settings to defaults.
src.gamelib.ui.menus.thumbnail_menu.ThumbnailItem | Represents an asset thumbnail in the menu.
src.gamelib.ui.menus.thumbnail_menu.ThumbnailMenu | Bottom menu bar with tool icons and asset thumb...
  __init__(self, tool_manager: ToolManager, thumbnail_size: int, visible_count: int, bottom_menu_height: int, tool_icon_size: int) | Initialize thumbnail menu.
  add_asset(self, category: str, item: ThumbnailItem) -> None | Add an asset to a category.
  draw(self, screen_width: int, screen_height: int) -> Tuple[Optional[str], Optional[str], Optional[str]] | Draw thumbnail menu at bottom of screen.
  _draw_tool_icons(self) -> None | Draw top row with small editor tool icons.
  _draw_asset_thumbnails(self) -> None | Draw main section with scrollable asset thumbna...
  _draw_category_thumbnails(self, category: str) -> None | Draw thumbnail grid for a specific category.
  populate_from_scene(self, scene) -> None | Populate asset list from scene objects.
  set_selected(self, category: Optional[str], item_id: Optional[str], tool_id: Optional[str]) -> None | Programmatically set selected item.
  get_selected(self) -> Tuple[Optional[str], Optional[str], Optional[str]] | Get currently selected items.
  load_thumbnail_image(self, filepath: str) -> Optional[tuple] | Load thumbnail image from file and cache it for...
  _parse_png(self, png_data: bytes) -> Tuple[Optional[int], Optional[int], Optional[bytes]] | Parse PNG file and extract image dimensions and...
  _unfilter_png_data(self, raw_data: bytes, width: int, height: int) -> bytes | Unfilter PNG scanlines and convert to proper im...
  _convert_to_rgba8(self, image_data: bytes, width: int, height: int) -> bytes | Convert image data to RGBA8 format for ImGui.
src.gamelib.ui.player_hud.PlayerHUD | High-level HUD controller that mirrors the debu...
  __init__(self, pipeline: 'RenderPipeline') -> None
  set_health(self, current: float, maximum: float) -> None
  set_minimap_status(self, status: str) -> None
  set_equipped_tool(self, tool_name: str, icon_path: Optional[str]) -> None
  set_hints(self, hints: Sequence[str]) -> None
  clear_hints(self) -> None
  set_section_value_color(self, section: str, color: Tuple[float, float, float, float]) -> None
  update(self, camera, frametime: float) -> None | Refresh HUD content based on current state.
  _create_rows(self) -> None
  _apply_default_layout(self) -> None
  _ensure_layout(self) -> None
  _layout_rows(self, viewport: Tuple[int, int]) -> None
  _compute_row_height(self, name: str) -> float
  _position_row(self, row: _HUDRow, base_x: float, row_top: float, row_height: float) -> None
  _update_compass(self, camera) -> None
  _update_health(self) -> None
  _update_minimap(self) -> None
  _update_tool(self) -> None
  _update_hints(self) -> None
src.gamelib.ui.player_hud._HUDRow | Container for HUD layout primitives.
src.gamelib.ui.theme.ColorPalette | Color palette for a theme.
src.gamelib.ui.theme.ThemeConfig | Complete theme configuration.
  from_dict(cls, data: Dict) -> ThemeConfig | Load theme from dictionary (JSON compatible).
  to_dict(self) -> Dict | Convert theme to dictionary (JSON serializable).
src.gamelib.ui.theme.ThemeManager | Manages ImGui themes and styling.
  __init__(self, theme_name: str) | Initialize theme manager.
  _load_theme(self, theme_name: str) -> ThemeConfig | Load theme from JSON or built-in.
  apply_theme(self, theme: ThemeConfig) -> None | Apply theme colors and styling to ImGui.
  switch_theme(self, theme_name: str) -> None | Switch to a different theme.
  get_color(self, color_name: str) -> Color3 | Get a color from the current theme palette.
src.gamelib.ui.ui_manager.UIManager | Central UI manager for ImGui integration.
  __init__(self, ctx: moderngl.Context, window_size: tuple[int, int], theme_name: str) | Initialize UI manager.
  set_input_manager(self, input_manager: InputManager) -> None | Set reference to input manager for context swit...
  handle_mouse_position(self, x: float, y: float) -> None | Update ImGui mouse position.
  handle_mouse_button(self, button: int, pressed: bool) -> None | Handle mouse button events.
  handle_mouse_scroll(self, x_offset: float, y_offset: float) -> None | Handle mouse scroll.
  handle_keyboard_event(self, key: int, pressed: bool) -> None | Handle keyboard events.
  handle_character_input(self, char: str) -> None | Handle text input.
  resize(self, width: int, height: int) -> None | Handle window resize.
  pause_game(self) -> None | Pause the game and show pause menu.
  resume_game(self) -> None | Resume the game and hide pause menu.
  show_main_menu_screen(self) -> None | Show main menu (before game starts).
  hide_main_menu_screen(self) -> None | Hide main menu and return to gameplay.
  toggle_pause_menu(self) -> None | Toggle pause menu on/off.
  is_input_captured_by_imgui(self) -> bool | Check if ImGui has captured input focus.
  start_frame(self) -> None | Called at the start of each frame.
  end_frame(self) -> None | Called at the end of each frame.
  render(self) -> None | Render ImGui to screen.
  render_pause_overlay(self) -> None | Render dim overlay when paused.
  shutdown(self) -> None | Clean up ImGui resources.
  switch_theme(self, theme_name: str) -> None | Switch to a different theme.

# TOTAL: 134 classes, 860 methods, 77 functions